iris_4
View(iris_1)
View(iris_2)
L <- list(name = c('Tom', 'Jane', 'Jum'), grade = c(3, 4, 4), gradation = c (F, F, T))
L$name
L <- list(name = c('Tom', 'Jane', 'Kim'), grade = c(3, 4, 4), gradation = c (F, F, T))
L$name
L[2]
L[[3]]
L[[2]]
l[['name']]
L[['name']]
L[[[2]]]
L[[2]]
L[[2],[1]]
L[[2][2]\]
L[[2][2]]
L$name
L[2]
L[[3]]
L[['name']]
array(1:12, c( 2, 2, 3))
print('dataEdy')
print('DataEdu')
print("Dataedu")
f <- c (0, 1, 1, 2, 3, 5, 8, 13)
cat("The finonacci numbers are : ", f, "....\n")
cat("The Fibonacci numbers are : ", f, "....\n")
cat("The Fibonacci numbers are : ", f, "...")
cat("The Fibonacci numbers are : ", f, "....\n")
rm(f)
f
class(iris)
class(iris$Sepal.Length)
mode(iris)
mode(iris$Species)
data(iris)
attach(iris)
iris$Species
Species
data(iris)
data(iris)
attach(iris)
View(iris)
iris$Species
Species
detathch(iris)
detach(iris)
Species
detach(iris)
detach(iris)
Species
str(iris)
length(iris)
nrow(iris)
ncol(iris)
summary(iris)
table(iris$Species)
prop.table(table(iris$Species))
table(iris)
table(iris)
table(iris$Species)
prop.table(table(iris$Species))
a <- c(40, 30 ,50 , 50, 90, 40, 50)
order(a)
sort(a)
order(a, decreasing = TRUE)
sort(a)
sort(a, decreasing = TRUE)
sort(a, decreasing = T)
class(iris)
mode(iris0)
mode(iris)
mode(iris$Sepal.Length)
mode(iris$Sepal.Length, iris$Sepal.Width)
mode(iris$Sepal.Length); mode(iris$Sepal.Width)
print(iris$Species)
nchar('tom')
paste('my', 'name', 'is', 'Tom', sep = " ")
substr('BiData Analysus', 1, 7)
path <- 'r_class/bigdata/analysis'
strsplit(path, '/')
s <- 'Curly is the smart one. Curly is funny, too.'
sub("Curly", 'Tom', s)
substr('BigData Anaysis", 1, 7')
substr('BigData Anaysis", 1, 7)
;
)
;
""
;
''
)
'
substr('Bigdata Analysis', 1, 7)
substr('Bigdata Analysis', 2, 8)
strsplit(path, '/')
sub('Curly', 'Tom', s)
gsub('Curly', 'Tom', s)
grep('1010', c('1001', '1010', '1110', '101000'))
grep('Curly', s)
grep('Curly', c(s)
)
ss <- c('Monday', 'Tuesday', 'Wednesday')
substr(ss, 1, 2)
rm(ss)
s <- c('Monday', 'Tuesday', 'Wednesday')
substr(s, 1, 2)
Sys.Date
Sys.Date()
as.Date('2019-03-01')
as.Date('2022-07-08')
as.Date('07/08/2022', format = '$m/$d/$Y')
as.Date('07/08/2022', format = '%m/%d/%Y')
as.Date('07/08/2022', format = '%m/%d/%y')
as.Date('07/08/2022', format = '%m/%d/%y')
as.Date('07/08/2022', format = '%M/%d/%y')
as.Date('07/08/2022', format = '%m/%d/%y')
format(Sys.Date(), '$a')
format(Sys.Date(), '%a')
format(Sys.Date())
format(Sys.Date(), '%b')
format(Sys.Date(), '%B')
format(Sys.Date(), '%d')
format(Sys.Date(), '%m')
format(Sys.Date(), '%M')
format(Sys.Date(), '%y')
format(Sys.Date(), '%Y')
as.Date('08/23/2019', '%m/%d/%Y')
as.Date('08/23/2019', '%m/%D/%Y')
as.Date('08/23/2019', '%M/%d/%Y')
as.Date('08/23/2019', '%M/%D/%Y')
getwd()
f1 <- read.csv('frame.csv', header - T)
f1 <- read.csv('frame.csv', header = T)
f1
install.packages("xlsx")
install.packages('rJava')
f2 M- read.xlsx('frame.xlsx', sheetIndex = 1, startRow = 1, header = T)
f2 <- read.xlsx('frame.xlsx', sheetIndex = 1, startRow = 1, header = T)
f3 <- read.table('exam1.txt', header = T)
f4 <- readLines("DJKIM.txt", encoding = 'UTF-8')
f4
f4 <- readLines("DJKIM.txt", encoding = 'UTF-8')
f4
install.packages('data.table')
library(data.table)
f5 <- fread('exam1.txt', header = TRUE)
f5
f5 <- fread('../../machine_learning/data/real_estate.csv', header = TRUE)
f5
write.csv(iris, file = 'iris.csv')
write.table(iris, ;iris.txt)
write.table(iris, 'iris.txt')
sink('regrssion.txt')
library(MASS)
data("Animals")
ml <- lm(log(brain)-log(body), data = Animals)
Abunaks
Animals
data(Animals)
Animals
ml <- lm(log(brain) - log(body), data = Animals)
attach(Animals)
ml <- lm(log(brain) - log(body), data = Animals)
Animals
print(Animals)
View(Animals)
View(Animals)
class(Animals)
class(Animals)
library(MASS)
data(Animals)
Animals
ml <- lm(log(brain) ~ log(body) , data = Animals)
summary(ml)
sink()
sink('regression.txt')
library(MASS)
sink('regression.txt')
data(Animals)
Animals
ml <- lm(log(brain) ~ log(body), data = Animals)
ml
summary(ml)
summary(ml)
summary(ml)
ml <- lm(log(brain) ~ log(body), data = Animals)
summary(ml)
sink()
max
summary
Animals
c
?c
sad
kl <- function(x) (x - mean(x)) / sd(x)
kl(1:10)
skew.and.kurto <- function(x) {}
skew.and.kurto <- function(x) {
}
;
return(c(skew, kurto))
skew.and.kurto <-function(x)        #왜도와 첨도를 구하는 함수
{
num1 <- mean((x - mean(x) ^3))
denom1 <- (mean((x - mean(x))^2))^1.5
num2 <- mean((x - mean(x))^6)
denom2 <- (mean((x - mean(x))^2))^2
skew <- num1 / denom1
kurto <- num2 / denom2 - 3
return(c(skew, kurto))
}
t5<- rt(1000,5)                    #1000 random obs from t with df 5
round(skew.and.kurto(t5),3)
print(pi)
print(pi, digit = 4)
cat('value of pi is ', pi, '\n')
cat('value of pi is ', format(pi, digit = 4), '\n')
options(digits = 3)
pi
asd
iris_2
#ex) 정수를 입력받아 짝수인지 홀수인지 판단하는 if문 작성
x <- 9
if(x%%2==0){                           # x/2의 나머지가 0이면 참
print(paste(x, "는 짝수입니다."))       # 참일 때 수행할 코드
}  else if (x%%2==1) {
print(paste(x, "는 홀수입니다."))
}  else {
print ("정수를 입력해주세요.")          # 위의 조건 중 어느것도 만족하지 않을 때 수행
}
#ex) 정수를 입력받아 짝수인지 홀수인지 판단하는 if문 작성
x <- 4
if(x%%2==0){                           # x/2의 나머지가 0이면 참
print(paste(x, "는 짝수입니다."))       # 참일 때 수행할 코드
}  else if (x%%2==1) {
print(paste(x, "는 홀수입니다."))
}  else {
print ("정수를 입력해주세요.")          # 위의 조건 중 어느것도 만족하지 않을 때 수행
}
#ex) 정수를 입력받아 짝수인지 홀수인지 판단하는 if문 작성
x <- 4.1
if(x%%2==0){                           # x/2의 나머지가 0이면 참
print(paste(x, "는 짝수입니다."))       # 참일 때 수행할 코드
}  else if (x%%2==1) {
print(paste(x, "는 홀수입니다."))
}  else {
print ("정수를 입력해주세요.")          # 위의 조건 중 어느것도 만족하지 않을 때 수행
}
#ex) 정수를 입력받아 짝수인지 홀수인지 판단하는 if문 작성
x <- 9
if(x%%2==0){                           # x/2의 나머지가 0이면 참
print(paste(x, "는 짝수입니다."))       # 참일 때 수행할 코드
}  else if (x%%2==1) {
print(paste(x, "는 홀수입니다."))
}  else {
print ("정수를 입력해주세요.")          # 위의 조건 중 어느것도 만족하지 않을 때 수행
}
#ex) 정수를 입력받아 짝수인지 홀수인지 판단하는 ifelse문을 작성
x <- 21.3
ifelse(x%%2==0, "짝수입니다.",
ifelse(x%%2==1, "홀수입니다.", "정수가 아닙니다."))
#ex) 위의 for문을 사용하여 수행한 예제를 while문을 이용하여 구현
year <- 2016
while(year<=2019){
print(paste("The year is", year))
year <- year+1}
for (year in c(2016:2019)){
print(paste("The year is", year))
}
while(year<=2019){
print(paste("The year is", year))
year <- year+1}
#ex) 위의 for문을 사용하여 수행한 예제를 while문을 이용하여 구현
year <- 2016
while(year<=2019){
print(paste("The year is", year))
year <- year+1}
# break : 반복문 종료
#ex) 1~10 까지의 숫자 중 짝수만 출력하기
i<-0
repeat{
i<-i+2
print(i)
if(i>=10){
break   # i가 10이상이면 반복문 종료
}
}
setwd('/home/devuk/Desktop/code/r/')
#user-defined function
f1 <- function() {
cat("function without parameter")
}
f1()
f3 <- function(x, y) {
add <- x + y
return(add)
}
f3
add <- f3(10, 20)
add
test <- read.csv('feature_target.csv')
test <- read.csv('/ch4/feature_target.csv')
test <- read.csv('ch4/feature_target.csv')
head(test())
head(test)
summary(test)
table(test$sum)
data_pro <- function(x) {
for(idx in 1:length(x)) {
cat(idx, 'st column frequency analysis result')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)) {
f <- table(x[idx])
cat(idx, 'st column max/min \n')
cat('max = ', max(f), "min = ", min(f), '\n')
}
}
data_pro(test)
#function example
x <- c(7, 5, 12, 9, 15, 6)
var_sc <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
#function example
x <- c(7, 5, 12, 9, 15, 6)
var_sc <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
var_sd(x)
var_sd <- function(x) {
var <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
cat('standard variance ', var, '\n')
cat('sample standard deviation ', sd, '\n')
}
var_sd(x)
#pytha
pytha <- function(s, t) {
a <- s ^ 2 - t ^ 2
b <- 2 * s * t
c <- s ^ 2 + t ^ 2
cat('Pythagorean theorem : 3 variables : ', a, b, c)
}
pytha(2, 1)
#gugu
gugu <- function(i, j) {
for(x in i) {
cat('**', x, 'only **\n')
for(y in j) {
cat(x, " * ", y, ' = ', x * y, '\n')
}
cat('\n')
}
}
i <- c(2 : 9)
j <- c(1 : 9)
gugu(i, j)
cat('** table ', x, ' **\n')
#gugu
gugu <- function(i, j) {
for(x in i) {
cat('** table ', x, ' **\n')
for(y in j) {
cat(x, " * ", y, ' = ', x * y, '\n')
}
cat('\n')
}
}
i <- c(2 : 9)
j <- c(1 : 9)
gugu(i, j)
#install.packages('reshape2')
library(reshape2)
data <- read.csv('feature_target.csv')
data <- read.csv('ch6/feature_target.csv')
data
str(data)
#wide format
wdie <- dcast(data, weekday ~ transfer_station)
#wide format
wdie <- dcast(data, weekday ~ transfer_station, sum)
#wide format
wdie <- dcast(data, weekday ~ line_number, sum)
#wide format
wide <- dcast(data, weekday ~ line_number, sum)
wide
rm(list = ls())
data <- read.csv('ch6/feature_target.csv')
data
str(data)
#wide format
wide <- dcast(data, weekday ~ line_number, sum)
wide
colnames(wide) <- c('weekday', 'weekend', 'ride', 'get_off', 'line_number')
wide
long <- melt(wide, id = 'weekday')
long
colnames(long) <- c('weekday', 'variable', 'sum')
long
#smiths
data('smiths')
smiths
long <- melt(id = 1:2, smiths)
long
dcast(long, subject + time ~ ...)
#3d array
data('airquality')
airquality
str(airquality)
airq
airquality
names(airquality) <- toupper(names(airquality))
head(airquality)
air_melt <- melt(airquality, id = c('MONTH', 'DAY'), na.rm = T)
head(air_melt)
names(air_melt) <- tolower(names(air_melt))
acast <- acast(air_melt, dat ~ month ~ variable)
acast <- acast(air_melt, day ~ month ~ variable)
acast
class(acast)
acast(air_melt,  month ~ variable, sum, margins = T)
#Exploratory Data Analysis
getwd()
#Exploratory Data Analysis
dataset <- read.csv('ch7/AER_credit_card_data.csv', header = T)
dataset
print(dataset)
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$card
length(dataset$card)
x <- dataset$card
y <- dataset$age
x
y
plot(dataset$income)
dataset['card']
dataset['income']
dataset[1]
dataset[3]
dataset[1, ]
dataset[ ,1]
dataset[c('card', 'income')]
dataset[ , c(2:4)]
dataset[c(2:4), ]
dataset[-c(1:100), ]
sumaary(dataset)
summary(dataset)
summary(dataset$income)
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
rm(list = ls())
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
rm(dataset
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$card
dataset$ID
dataset$Id
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
print(dataset)
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$Id
length(dataset$card)
x <- dataset$card
y <- dataset$age
dataset$Id
str(dataset)
length(dataset$MiscFeature)
x <- dataset$Id
y <- dataset$MiscFeature
x
y
plot(dataset$MiscFeature)
plot(dataset$Id)
dataset['Id']
dataset['MiscFeature']
dataset[-c(1:100), ]
summary(dataset$MiscFeature)
str(dataset)
summary(dataset$MoSold)
summary(dataset$GarageArea)
sum(dataset$GarageArea)
sum(dataset$GarageArea, na.rm = T)
#NA remove
area <- na.omit(dataset$GarageArea)
sum(area)
length(area)
#replace missing value
x <- dataset$GarageArea
x[1:30]
dataset$GarageArea2 <- ifelse(!is.na(x), x, 0)
dataset$GarageArea2
x <- dataset$GarageArea
dataset$GarageArea3 <- ifelse(!is.na(x), x, round(mean(x, na.rm = T), 2))
dataset$GarageArea3
x <- dataset$GarageArea
dataset$GarageArea3 <- ifelse(!is.na(x), x, round(mean(x, na.rm = T), 2))
dataset$GarageArea3
table(dataset$GarageArea)
pie(table(dataset$GarageArea))
