#install.packages('lattice')
library(lattice)
densityplot(~LotShape, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
summary(new_data$LotShape); summary(new_data$LandContour)
str(new_data)
densityplot(~ LandArea, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
densityplot(~ LotArea, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
#con vs cat vs cat
densityplot(~ LotArea | Lotshape,
data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
#con vs cat vs cat
densityplot(~ LotArea | LotShape,
data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
densityplot(~ LotArea | LandContour,
data = new_data,
groups = LotShape,
plot.points = T, auto.key = T)
#con vs con vs cat
str(new_data)
xyplot(LotFrontage ~ LotArea | factor(LotShape),
data = new_data)
data <- read.csv('ch7/test.csv')
rm(list = ls())
data <- read.csv('ch7/test.csv')
head(data)
table(data$GarageQual)
GarageQual2 <- ifelse(data$GarageQual == 'Fa' |
data$GarageQual == 'Gd', 0, 1)
GarageQual2[1:10]
data$GarageQual[1:10]
data$GarageQual2 <- GarageQual2
head(data)
rm(list = ls())
user_data <- read.csv('../r_csv/Part-II/user_data.csv', header = T)
user_data <- read.csv('../r_csv/Part-II/user_data.csv', header = T)
user_data <- read.csv('../r_csv/Part-II/user_data.csv')
user_data <- read.csv("../r_csv/Part-II/user_data.csv")
user_data <- read.csv("../r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data2.csv", header = T)
View(user_data)
View(user_data)
head(user_data)
help(read.csv())
help(read.csv
help(read.csv)
help(read.csv)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data2.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data1.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, ileEncoding = 'iso-8859-1', encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'iso-8859-1', encoding = 'utf-8')
help(read.csv)
head(user_data)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'iso-8859-1', encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'ISO-8859-1', encoding = 'UTF-8')
head(user_data)
user_data <- read.csv("../r_csv/Part-II/user_data2.csv", header = T)
user_data <- read.csv("../r_csv/Part-II/user_data2.csv", header = T, encoding = 'utf-8')
head(user_data)
table(user_data$house_type)
house_type2 <- ifelse(user_data$house_type == 1 |
user_data$house_type == 2, 0, 1)
house_type2
user_data$house_type2 <- house_type2
#1:1 relationship derived variable
pay_data <- read.csv("../r_csv/Part-II/pay_data2.csv", header = T, encoding = 'utf-8')
head(pay_data, 10)
table(pay_data$product_type)
library(reshape2)
product_price <- dcast(pay_data, user_id ~ product_type,
sum, na.rm = T)
head(product_price)
names(product_price) <- c('user_id', 'grocery(1)', 'grocery(2)',
'clothing(3)', 'stuff(4)', 'etc(5)')
head(product_price)
pay_price <- dcast(pay_data, user_id ~ pay_method, length)
head(pay_price)
head(user_data)
str(user_data)
str(pay_data)
#combining derived variance
libarary(plyr)
#combining derived variance
library(plyr)
user_pay_data <- join(user_data, product_price, by = 'user_id')
head(user_pay_data)
user_pay_data <- join(user_pay_data, pay_price, by = 'user_id')
user_pay_data[c(1:10), c(1, 7:15)]
user_pay_data$total <- user_pay_data$`grocery(1)` + user_pay_data$`grocery(2)` + user_pay_data$`clothing(3)` + user_pay_data$`stuff(4)` + user_pay_data$`etc(5)`
user_pay_data[c(1:10), c(1, 7:15)]
user_pay_data[c(1:10), c(1, 7:11, 16)]
print(user_pay_data)
write.csv(user_pay_data, 'ch7/cleanData.csv', quote = F, row.names = F)
write.csv(user_pay_data, 'ch7/cleanData.csv', quote = F, row.names = F)
rm(list = ls())
data <- read.csv('ch7/cleanData.csv', header = T)
head(data)
nrow(data)
choice1 <- sample(50:nrow(data), 30)
choice1
choice2 <- sample(50:norw(data), 30)
choice2
choice2 <- sample(50:nrow(data), 30)
choice2
choice3 <- sample(50:nrow(data), 30)
choice3
choice3 <- sample(50:100, 30)
choice1 <- sample(nrow(data), 30)
choice1
choice2 <- sample(50:nrow(data), 30)
choice2
choice3 <- sample(50:100, 30)
choice3
choice4 <- sample(c(10:50, 80:150, 160:190), 30)
choice4
data[choice1, ]
#7:3 sampling
data('iris')
dim(iris)
idx <- sample(1:nrow(iris), nrow(iris) * 0.7)
training <- iris[idx, ]
test <- iris[-idx, ]
dim(training)
#k-fold sampling
name <- c('a', 'b', 'c', 'd', 'e', 'f')
score <- c(90, 85, 99, 75, 65, 88)
df <- data.frame(Name = name, Score = score)
install.packages('cvTools')
#install.packages('cvTools')
library(cvTools)
cross <- cvFolds(n = 6, K = 3, R = 1, type = 'random')
cross
str(cross)
cross$which
class(cross$which)
mode(cross$which)
str(cross$which)
cross$subsets[cross$which ==1, 1]
cross$subsets[cross$which == 1, 1]
corss$subsets[cross$which == 2, 1]
cross$subsets[cross$which == 2, 1]
cross$subsets[cross$which == 3, 1]
#df observation
r <- 1
K <- 1:3
#df observation
r <- 1
K <- 1:3
for(i in K) {
data_idx <- cross$subsets[cross$which == i, r]
cat('K = ', i, 'validation data\n')
print(df[datas_idx, ])
cat('K = ', i, 'training data\n')
print(df[-datas_idx, ])
}
str(df)
print(df[-data_idx, ])
for(i in K) {
data_idx <- cross$subsets[cross$which == i, r]
cat('K = ', i, 'validation data\n')
print(df[data_idx, ])
cat('K = ', i, 'training data\n')
print(df[-data_idx, ])
}
rm(list = ls())
setwd('/home/devuk/Desktop/code/r')
install.packages('lattice')
library(lattice)
install.packages('mlmRev')
library(mlmRev)
install.packages('mlmRev')
install.packages('nloptr')
install.packages("~/Downloads/mlmRev_1.0-8.tar.gz", repos = NULL, type = "source")
install.packages('lme4')
install.packages('mlmRev')
install.packages('Rccp')
install.packages('nloptr')
install.packages('nloptr')
install.packages('lme4')
library(mlmRev)
install.packages('mlmRev')
install.packages('nloptr')
install.packages('lme4')
install.packages('mlmRev')
#install.packages('lattice')
library(lattice)
#install.packages('mlmRev')
library(mlmRev)
data("Chem97")
str(Chem97)
summary(Chem97)
histogram(~gcsescore, data = Chem97)
histogram(~gcsescore | score, data = Chem97)
histogram(~gcsescore | factor(score), data = Chem97)
densityplot(~gcsescore | factor(score), data = Chem97,
groups = gender,
plot.points = T, auto.key = T)
densityplot(~gcsescore | factor(score), data = Chem97,
groups = gender,
plot.points = T, auto.key = F)
densityplot(~gcsescore | factor(score), data = Chem97,
groups = gender,
plot.points = T, auto.key = T)
#barchart
data(VADeaths)
VADea
VADeaths
str(VADeaths)
class(VADeaths)
mode(VADeaths)
dft <- as.data.frame(VADeaths)
str(dft)
dft
barchart(Var1 = Freq | Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), orogin = 0)
dft
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq |Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1))
dft <- as.data.frame.table(VADeaths)
str(dft)
dft
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
#dotplot
dotplot(Var1 ~ Freq | Var2, dft)
par = mforw(1, 2)
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
#dotplot
dotplot(Var1 ~ Freq | Var2, dft)
par = mforw(1, 2)
par = mfrow(1, 2)
mfrow = par(1, 2)
mfrow = par(2, 1)
par(mfrow = c(2, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
#dotplot
dotplot(Var1 ~ Freq | Var2, dft)
par(mfrow = c(2, 1))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
dotplot(Var1 ~ Freq | Var2, dft)
par(mfrow = c(1, 2))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
dotplot(Var1 ~ Freq | Var2, dft)
#dotplot
par(mfrow = c(2, 2))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
dotplot(Var1 ~ Freq | Var2, dft)
#dotplot
par(mfrow = c(2, 2))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
dotplot(Var1 ~ Freq | Var2, dft)
#dotplot
par(mfrow = c(5, 2))
barchart(Var1 ~ Freq | Var2, data = dft, layout = c(4, 1), origin = 0)
dotplot(Var1 ~ Freq | Var2, dft)
dotplot(Var1 ~ Freq | Var2, dft, layout = c(4, 1))
dotplot(Var1 ~ Freq, data = dft,
groups = Var2, type = 'n',
auto.key = list(space = 'right', points = T, lines = T))
dotplot(Var1 ~ Freq, data = dft,
groups = Var2, type = 'o',
auto.key = list(space = 'right', points = T, lines = T))
#xyplot
library(datasets)
str(airquality)
xyplot(Ozone ~ Windm data = airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind | month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
convert <- transform(airquality, Month = factor(Month))
str(convert)
covnert
convert
str(airquality)
xyplot(Ozone ~ Wind | Month, data = convert)
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = convert)
xyplot(Ozone ~ Wind | Month, data = airquality)
xyplot(Ozone ~ Wind | Month, data = convert)
head(quakes)
str(quakes)
xyplot(lat ~ long, data = quakes, pch = ',')
tplot <- xyplot(lat ~ long, data = quakes, pch = ',')
tplot <- update(tploy, main = '1964 ~ Pacific ocean earth quakes')
tplot <- update(tplot, main = '1964 ~ Pacific ocean earth quakes')
plrint(tplot)
print(tplot)
#install.packages('lattice')
library(lattice)
#xyplot
library(datasets)
str(airquality)
tplot <- xyplot(lat ~ long, data = quakes, pch = ',')
tplot <- update(tplot, main = '1964 ~ Pacific ocean earth quakes')
print(tplot)
range(quakes$depth)
quakes$depth2[quakes$depth >= 40 & quakes$depth <= 150] <- 1
quakes$depth2[quakes$depth >= 151 & quakes$depth <= 250] <- 2
quakes$depth2[quakes$depth >= 251 & quakes$depth <= 350] <- 3
quakes$depth2[quakes$depth >= 351 & quakes$depth <= 450] <- 4
quakes$depth2[quakes$depth >= 451 & quakes$depth <= 550] <- 5
quakes$depth2[quakes$depth >= 551 & quakes$depth <= 680] <- 6
convert <- transform(quakes, depth2 = factor(depth2))
xyplot(lat ~ long | depth2, data = convert)
xyplot(Ozone + Solar.R ~ Wind | factor(Month),
data = airquality,
col = c('blue', 'red'),
layout = c(5,1))
airquality$Wind
#data categorization
numgroup <- equal.count(1:150, number = 4, overlap = 0)
numgroup
datagroup <- equal.count(quakes$depth, number = 5, overlap = 0)
datagroup
depthgroup <- equal.count(quakes$depth, number = 5, overlap = 0)
depthgroup
xyplot(lat ~ long | depthgroupt)
rm(list = datagroup)
rm(ls = datagroup)
xyplot(lat ~ long | depthgroup, data = quakes,
main = 'Fiji Earthquakes(depthgroup)',
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = 'red')
magnitudegroup <- equal.count(quakes$mag, number = 2, overlap = 0)
magnitudegroup
xyplot(lat ~ long | magnitudegroup, data = quakes,
main = 'Fiji Earthquakes(magnitude)',
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = 'blue')
#install.packages('lattice')
library(lattice)
#xyplot
library(datasets)
xyplot(lat ~ long | depthgroup * magnitudegroup. data = qukaes,
main = "Fiji EarthQuakes",
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
xyplot(lat ~ long | depthgroup * magnitudegroup,. data = qukaes,
main = "Fiji EarthQuakes",
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
xyplot(lat ~ long | depthgroup * magnitudegroup, data = qukaes,
main = "Fiji EarthQuakes",
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
xyplot(lat ~ long | depthgroup * magnitudegroup, data = quakes,
main = "Fiji EarthQuakes",
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
depthgroup <- equal.count(quakes$depth, number = 5, overlap = 0)
magnitudegroup <- equal.count(quakes$mag, number = 2, overlap = 0)
xyplot(lat ~ long | depthgroup * magnitudegroup, data = quakes,
main = "Fiji EarthQuakes",
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
quakes$depth3[quakes$depth >= 39.5 & quakes$depth <= 80.5] <- 'd1'
quakes$depth3[quakes$depth >= 79.5 & quakes$depth <= 186.5] <- 'd2'
quakes$depth3[quakes$depth >= 185.5 & quakes$depth <= 397.5] <- 'd3'
quakes$depth3[quakes$depth >= 396.5 & quakes$depth <= 562.5] <- 'd4'
quakes$depth3[quakes$depth >= 562.5 & quakes$depth <= 680.5] <- 'd5'
quakes$mag3 [quakes$mag >= 4.55 & quakes$mag <= 6.45] <- 'm2'
source("~/Desktop/code/r/ch8/grid.R")
quakes$depth3[quakes$depth >= 39.5 & quakes$depth <= 80.5] <- 'd1'
quakes$depth3[quakes$depth >= 79.5 & quakes$depth <= 186.5] <- 'd2'
quakes$depth3[quakes$depth >= 185.5 & quakes$depth <= 397.5] <- 'd3'
quakes$depth3[quakes$depth >= 396.5 & quakes$depth <= 562.5] <- 'd4'
quakes$depth3[quakes$depth >= 562.5 & quakes$depth <= 680.5] <- 'd5'
quakes$mag3[quakes$mag >= 3.95 & quakes$mag <= 4.65] <- 'm1'
quakes$mag3[quakes$mag >= 4.55 & quakes$mag <= 6.45] <- 'm2'
convert <- transform(quakes,
depth3 = factor(depth3),
mag3 = factor(mag3))
xyplot(lat ~ long | depth3 * mag3, data = convert,
main = 'Fiji EarthQuakes',
ylab = 'latitude', xlab = 'longitude',
pch = '@', col = c('red', 'blue'))
#conditional graph
coplot(lat ~ long | depth, data = quakes)
coplot(lat ~ long | depth, data = quakes,
overlap = 0.1)
#conditional graph
coplot(lat ~ long | depth, data = quakes)
coplot(lat ~ long | depth, data = quakes,
overlap = 0.1)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1,
panel = panel.smooth)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1,
panel = panel.smooth)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1,
panel = panel.barchart())
panel = panel.smooth
rm(ls = panel)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1,
panel = panel.smooth)
coplot(lat ~ long | depth, data = quakes,
number = 5, row = 1,
col = 'blue',
bar.bg = c(num = 'green'))
?coplot()
#3d scatterplot graph
cloud(depth ~ alt * long, data = quakes,
zlim = rev(range(quakes$depth)),
xlab = 'latitude', ylab = 'longitude', zlab = 'depth')
#3d scatterplot graph
cloud(depth ~ lat * long, data = quakes,
zlim = rev(range(quakes$depth)),
xlab = 'latitude', ylab = 'longitude', zlab = 'depth')
cloud(depth ~ lat * long, data = quakes,
zlim = rev(range(quakes$depth)),
panel.aspect = 0.9,
screen = list(z = 45, x = -25),
xlab = 'latitude', ylab = 'longitude', zlab = 'depth')
rm(ls = list())
rm(list = ls())
install.packages('ggplot2')
#install.packages('ggplot2')
library(ggplot2)
data(mpg)
str(mpg)
head(mpg)
table(mpg$drv)
#qplot - geometric object -> mapping -> graph
qplot(hwy, data = mpg)
qplot(hwy, data = mpg, fill = drv)
#qplot - geometric object -> mapping -> graph
qplot(hwy, data = mpg)
mpg$hwy
qplot(hwy, data = mpg, fill = drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
par(mfrow(c(2,2)))
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
par(mfrow(c(1,6)))
par(mforw(c(1,6)))
mforw(par = c(1,6))
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
mfrow(par = c(1,6))
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
par(mfrow = c(1, 6))
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = . ~ drv,
binwidth = 2)
qplot(hwy, data = mpg, fill = drv,
facets = drv ~ .,
binwidth = 2)
#2variables
qplot(displ, hwy, data = mpg)
