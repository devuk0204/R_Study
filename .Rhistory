i<-i+2
print(i)
if(i>=10){
break   # i가 10이상이면 반복문 종료
}
}
setwd('/home/devuk/Desktop/code/r/')
#user-defined function
f1 <- function() {
cat("function without parameter")
}
f1()
f3 <- function(x, y) {
add <- x + y
return(add)
}
f3
add <- f3(10, 20)
add
test <- read.csv('feature_target.csv')
test <- read.csv('/ch4/feature_target.csv')
test <- read.csv('ch4/feature_target.csv')
head(test())
head(test)
summary(test)
table(test$sum)
data_pro <- function(x) {
for(idx in 1:length(x)) {
cat(idx, 'st column frequency analysis result')
print(table(x[idx]))
cat('\n')
}
for(idx in 1:length(x)) {
f <- table(x[idx])
cat(idx, 'st column max/min \n')
cat('max = ', max(f), "min = ", min(f), '\n')
}
}
data_pro(test)
#function example
x <- c(7, 5, 12, 9, 15, 6)
var_sc <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
#function example
x <- c(7, 5, 12, 9, 15, 6)
var_sc <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
var_sd(x)
var_sd <- function(x) {
var <- sum(x - mean(x) / 2) / (length(x) - 1)
sd <- sqrt(var)
cat('standard variance ', var, '\n')
cat('sample standard deviation ', sd, '\n')
}
var_sd(x)
#pytha
pytha <- function(s, t) {
a <- s ^ 2 - t ^ 2
b <- 2 * s * t
c <- s ^ 2 + t ^ 2
cat('Pythagorean theorem : 3 variables : ', a, b, c)
}
pytha(2, 1)
#gugu
gugu <- function(i, j) {
for(x in i) {
cat('**', x, 'only **\n')
for(y in j) {
cat(x, " * ", y, ' = ', x * y, '\n')
}
cat('\n')
}
}
i <- c(2 : 9)
j <- c(1 : 9)
gugu(i, j)
cat('** table ', x, ' **\n')
#gugu
gugu <- function(i, j) {
for(x in i) {
cat('** table ', x, ' **\n')
for(y in j) {
cat(x, " * ", y, ' = ', x * y, '\n')
}
cat('\n')
}
}
i <- c(2 : 9)
j <- c(1 : 9)
gugu(i, j)
#install.packages('reshape2')
library(reshape2)
data <- read.csv('feature_target.csv')
data <- read.csv('ch6/feature_target.csv')
data
str(data)
#wide format
wdie <- dcast(data, weekday ~ transfer_station)
#wide format
wdie <- dcast(data, weekday ~ transfer_station, sum)
#wide format
wdie <- dcast(data, weekday ~ line_number, sum)
#wide format
wide <- dcast(data, weekday ~ line_number, sum)
wide
rm(list = ls())
data <- read.csv('ch6/feature_target.csv')
data
str(data)
#wide format
wide <- dcast(data, weekday ~ line_number, sum)
wide
colnames(wide) <- c('weekday', 'weekend', 'ride', 'get_off', 'line_number')
wide
long <- melt(wide, id = 'weekday')
long
colnames(long) <- c('weekday', 'variable', 'sum')
long
#smiths
data('smiths')
smiths
long <- melt(id = 1:2, smiths)
long
dcast(long, subject + time ~ ...)
#3d array
data('airquality')
airquality
str(airquality)
airq
airquality
names(airquality) <- toupper(names(airquality))
head(airquality)
air_melt <- melt(airquality, id = c('MONTH', 'DAY'), na.rm = T)
head(air_melt)
names(air_melt) <- tolower(names(air_melt))
acast <- acast(air_melt, dat ~ month ~ variable)
acast <- acast(air_melt, day ~ month ~ variable)
acast
class(acast)
acast(air_melt,  month ~ variable, sum, margins = T)
#Exploratory Data Analysis
getwd()
#Exploratory Data Analysis
dataset <- read.csv('ch7/AER_credit_card_data.csv', header = T)
dataset
print(dataset)
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$card
length(dataset$card)
x <- dataset$card
y <- dataset$age
x
y
plot(dataset$income)
dataset['card']
dataset['income']
dataset[1]
dataset[3]
dataset[1, ]
dataset[ ,1]
dataset[c('card', 'income')]
dataset[ , c(2:4)]
dataset[c(2:4), ]
dataset[-c(1:100), ]
sumaary(dataset)
summary(dataset)
summary(dataset$income)
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
rm(list = ls())
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
rm(dataset
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$card
dataset$ID
dataset$Id
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
print(dataset)
View(dataset)
names(dataset)
attributes(dataset)
str(dataset)
dataset$Id
length(dataset$card)
x <- dataset$card
y <- dataset$age
dataset$Id
str(dataset)
length(dataset$MiscFeature)
x <- dataset$Id
y <- dataset$MiscFeature
x
y
plot(dataset$MiscFeature)
plot(dataset$Id)
dataset['Id']
dataset['MiscFeature']
dataset[-c(1:100), ]
summary(dataset$MiscFeature)
str(dataset)
summary(dataset$MoSold)
summary(dataset$GarageArea)
sum(dataset$GarageArea)
sum(dataset$GarageArea, na.rm = T)
#NA remove
area <- na.omit(dataset$GarageArea)
sum(area)
length(area)
#replace missing value
x <- dataset$GarageArea
x[1:30]
dataset$GarageArea2 <- ifelse(!is.na(x), x, 0)
dataset$GarageArea2
x <- dataset$GarageArea
dataset$GarageArea3 <- ifelse(!is.na(x), x, round(mean(x, na.rm = T), 2))
dataset$GarageArea3
x <- dataset$GarageArea
dataset$GarageArea3 <- ifelse(!is.na(x), x, round(mean(x, na.rm = T), 2))
dataset$GarageArea3
table(dataset$GarageArea)
pie(table(dataset$GarageArea))
rm(list = ls()
)
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
attributes(dataset)
str(dataset)
summary(dataset$PoolQC)
summary(dataset$GarageQual)
summary(dataset$PavedDrive)
summary(dataset$Fireplaces)
summary(dataset$FireplaceQu)
dataset <- subset(dataset, FireplaceQu == 'TA')
dataset
length(dataset$FireplaceQu)
pie(table(dataset$FireplaceQu))
pie(table(dataset$FireplaceQu), col = c('red'))
#continuous variable outlier handling
dataset$LotArea
length(dataset$LotArea)
#Exploratory Data Analysis
dataset <- read.csv('ch7/test.csv', header = T)
#continuous variable outlier handling
dataset$LotArea
length(dataset$LotArea)
plot(dataset$LotArea)
summary(dataset$LotArea)
dataset2 <- subset(dataset, LotArea >= 5000 | LotArea <= 30000)
length(dataset2)
stem(dataset2$LotArea)
length(dataset2$LotArea)
summary(dataset2$LotArea)
dataset2 <- subset(dataset, LotArea >= 5000 | LotArea <= 30000)
length(dataset2$LotArea)
stem(dataset2$LotArea)
summary(dataset2$LotArea)
dataset2 <- subset(dataset, LotArea >= 5000 | LotArea <= 30000)
dataset2 <- subset(dataset, dataset$LotArea >= 5000 | dataset$LotArea <= 30000)
length(dataset2$LotArea)
stem(dataset2$LotArea)
summary(dataset2$LotArea)
dataset2 <- subset(dataset, LotArea >= 5000 & LotArea <= 30000)
length(dataset2$LotArea)
stem(dataset2$LotArea)
summary(dataset2$LotArea)
boxplot(dataset)
boxplot(dataset$LotArea)
boxplot(dataset2$LotArea)
boxplot(dataset$LotArea)
boxplot(dataset2$LotArea)
#find outlier
boxplot(dataset$LotFrontage)
boxplot(dataset$LotFrontage)$stats
dataset_sub <- subset(dataset, LotFrontage >= 20 $ LotFronatage <= 150)
dataset_sub <- subset(dataset, LotFrontage >= 20 & LotFronatage <= 150)
dataset_sub <- subset(dataset, LotFrontage >= 20 & LotFronatage <= 150)
dataset_sub <- subset(dataset, LotFrontage >= 20 & LotFronatage <= 150)
#find outlier
boxplot(dataset$LotFrontage)
boxplot(dataset$LotFrontage)$stats
dataset_sub <- subset(dataset, LotFrontage >= 20 & LotFronatage <= 150)
#find outlier
boxplot(dataset$LotArea)
boxplot(dataset$LotArea)$stats
dataset_sub <- subset(dataset, LotArea >= 1470.0 & LotArea <= 17597.0)
summary(dataset_sub)
summary(dataset_sub$LotArea)
#scale change
summary(dataset2$Id)
dataset2$Id2[dataset2$Id <= 1900] <- 'A'
dataset2$Id2[dataset2$Id > 1900] <- 'B'
dataset2$Id2[dataset2$Id > 2547] <- 'C'
dataset2$Id2
#categorical vs categorical
new_data <- read.csv('ch7/test.csv')
#categorical vs categorical
new_data <- read.csv('ch7/test.csv')
str(new_data)
str(new_data)
lotshape <- table(new_data$LotShape, new_data$LandContour)
lotshape
shape_contour <- table(new_data$LotShape, new_data$LandContour)
shape_contour
contour_shape <- table(new_data$LandContour, new_data$LotShape)
contour_shape
barplot(shape_contour, beside = T, horiz = T,
col = rainbow(4),
legend = row.names(shape_contour),
main = 'test')
barplot(contour_shape, beside = T, horiz = T,
col = rainbow(4),
legend = row.names(contour_shape),
main = 'test')
install.packages('lattice')
#continuous vs categorical
#install.packages('lattice')
library(lattice)
densityplot(~LotShape, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
summary(new_data$LotShape); summary(new_data$LandContour)
str(new_data)
densityplot(~ LandArea, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
densityplot(~ LotArea, data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
#con vs cat vs cat
densityplot(~ LotArea | Lotshape,
data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
#con vs cat vs cat
densityplot(~ LotArea | LotShape,
data = new_data,
groups = LandContour,
plot.points = T, auto.key = T)
densityplot(~ LotArea | LandContour,
data = new_data,
groups = LotShape,
plot.points = T, auto.key = T)
#con vs con vs cat
str(new_data)
xyplot(LotFrontage ~ LotArea | factor(LotShape),
data = new_data)
data <- read.csv('ch7/test.csv')
rm(list = ls())
data <- read.csv('ch7/test.csv')
head(data)
table(data$GarageQual)
GarageQual2 <- ifelse(data$GarageQual == 'Fa' |
data$GarageQual == 'Gd', 0, 1)
GarageQual2[1:10]
data$GarageQual[1:10]
data$GarageQual2 <- GarageQual2
head(data)
rm(list = ls())
user_data <- read.csv('../r_csv/Part-II/user_data.csv', header = T)
user_data <- read.csv('../r_csv/Part-II/user_data.csv', header = T)
user_data <- read.csv('../r_csv/Part-II/user_data.csv')
user_data <- read.csv("../r_csv/Part-II/user_data.csv")
user_data <- read.csv("../r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data2.csv", header = T)
View(user_data)
View(user_data)
head(user_data)
help(read.csv())
help(read.csv
help(read.csv)
help(read.csv)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data2.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data1.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, ileEncoding = 'iso-8859-1', encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'iso-8859-1', encoding = 'utf-8')
help(read.csv)
head(user_data)
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'iso-8859-1', encoding = 'utf-8')
user_data <- read.csv("/home/devuk/Desktop/code/r_csv/Part-II/user_data.csv", header = T, fileEncoding = 'ISO-8859-1', encoding = 'UTF-8')
head(user_data)
user_data <- read.csv("../r_csv/Part-II/user_data2.csv", header = T)
user_data <- read.csv("../r_csv/Part-II/user_data2.csv", header = T, encoding = 'utf-8')
head(user_data)
table(user_data$house_type)
house_type2 <- ifelse(user_data$house_type == 1 |
user_data$house_type == 2, 0, 1)
house_type2
user_data$house_type2 <- house_type2
#1:1 relationship derived variable
pay_data <- read.csv("../r_csv/Part-II/pay_data2.csv", header = T, encoding = 'utf-8')
head(pay_data, 10)
table(pay_data$product_type)
library(reshape2)
product_price <- dcast(pay_data, user_id ~ product_type,
sum, na.rm = T)
head(product_price)
names(product_price) <- c('user_id', 'grocery(1)', 'grocery(2)',
'clothing(3)', 'stuff(4)', 'etc(5)')
head(product_price)
pay_price <- dcast(pay_data, user_id ~ pay_method, length)
head(pay_price)
head(user_data)
str(user_data)
str(pay_data)
#combining derived variance
libarary(plyr)
#combining derived variance
library(plyr)
user_pay_data <- join(user_data, product_price, by = 'user_id')
head(user_pay_data)
user_pay_data <- join(user_pay_data, pay_price, by = 'user_id')
user_pay_data[c(1:10), c(1, 7:15)]
user_pay_data$total <- user_pay_data$`grocery(1)` + user_pay_data$`grocery(2)` + user_pay_data$`clothing(3)` + user_pay_data$`stuff(4)` + user_pay_data$`etc(5)`
user_pay_data[c(1:10), c(1, 7:15)]
user_pay_data[c(1:10), c(1, 7:11, 16)]
print(user_pay_data)
write.csv(user_pay_data, 'ch7/cleanData.csv', quote = F, row.names = F)
write.csv(user_pay_data, 'ch7/cleanData.csv', quote = F, row.names = F)
rm(list = ls())
data <- read.csv('ch7/cleanData.csv', header = T)
head(data)
nrow(data)
choice1 <- sample(50:nrow(data), 30)
choice1
choice2 <- sample(50:norw(data), 30)
choice2
choice2 <- sample(50:nrow(data), 30)
choice2
choice3 <- sample(50:nrow(data), 30)
choice3
choice3 <- sample(50:100, 30)
choice1 <- sample(nrow(data), 30)
choice1
choice2 <- sample(50:nrow(data), 30)
choice2
choice3 <- sample(50:100, 30)
choice3
choice4 <- sample(c(10:50, 80:150, 160:190), 30)
choice4
data[choice1, ]
#7:3 sampling
data('iris')
dim(iris)
idx <- sample(1:nrow(iris), nrow(iris) * 0.7)
training <- iris[idx, ]
test <- iris[-idx, ]
dim(training)
#k-fold sampling
name <- c('a', 'b', 'c', 'd', 'e', 'f')
score <- c(90, 85, 99, 75, 65, 88)
df <- data.frame(Name = name, Score = score)
install.packages('cvTools')
#install.packages('cvTools')
library(cvTools)
cross <- cvFolds(n = 6, K = 3, R = 1, type = 'random')
cross
str(cross)
cross$which
class(cross$which)
mode(cross$which)
str(cross$which)
cross$subsets[cross$which ==1, 1]
cross$subsets[cross$which == 1, 1]
corss$subsets[cross$which == 2, 1]
cross$subsets[cross$which == 2, 1]
cross$subsets[cross$which == 3, 1]
#df observation
r <- 1
K <- 1:3
#df observation
r <- 1
K <- 1:3
for(i in K) {
data_idx <- cross$subsets[cross$which == i, r]
cat('K = ', i, 'validation data\n')
print(df[datas_idx, ])
cat('K = ', i, 'training data\n')
print(df[-datas_idx, ])
}
str(df)
print(df[-data_idx, ])
for(i in K) {
data_idx <- cross$subsets[cross$which == i, r]
cat('K = ', i, 'validation data\n')
print(df[data_idx, ])
cat('K = ', i, 'training data\n')
print(df[-data_idx, ])
}
rm(list = ls())
setwd('/home/devuk/Desktop/code/r')
install.packages('lattice')
library(lattice)
install.packages('mlmRev')
library(mlmRev)
install.packages('mlmRev')
install.packages('nloptr')
install.packages("~/Downloads/mlmRev_1.0-8.tar.gz", repos = NULL, type = "source")
install.packages('lme4')
install.packages('mlmRev')
install.packages('Rccp')
